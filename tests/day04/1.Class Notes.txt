Playwright Day04

    Topics:
        - Handling Array of elements
            - Not in the PDF 
        - Playwright Assertions
        - iframes
        - Alerts

    Next Class:
        - Mouse Actions 
            - In Selenium - Actions class
        - Web Tables
        - Window pop-up Handlings
        - SEP User Stories



    Note: for Practice we will use the followin 
          CT - Slef Enrollment Platform - qa.sep.tdtm.cydeo.com/taws
                SEP_USERNAME = automation-user
                SEP_PASSWORD = 123abc
          Tes Data for Credit created       
                docs.stripe.com/testing 
  

----------------------------------------------------------------------------------------------------------------------------------------------------
New Topic 

    Playwright Assertions
        - this will be the part of almost all the topics. So, as we move on, we will talk all the methods as we ahve been doing so. 


        - Assertions are statements in our test code that check if a condition is true.
        - Helps us to validate that the software behaves as expected.
        - Assertions catch errors and bugs early in the development process
        - Playwright provides built-in assertion methods to make tests more reliable:


    - Assertion Methods - with values
        Methods Name                                                Description
        -----------------------------                               ------------------------------------------------
        expect(value).toBe(expected)                                - Checks if value is strictly equal to expected
        expect(value).toBeTruthy()                                  - Checks if value is truthy
        expect(value).toBeFalsy()                                   - Checks if value is falsy
        expect(value).toBeGreaterThan(number)                       - Checks if value is greater than number
        expect(value).toBeGreaterThan(number)                       - Checks if value is greater than or equal to number
        expect(value).toBeGreaterThanOrEqual(number)                - Checks if value is less than number
        expect(value).toBeLessThan(number)                          - Checks if value is less than number
        expect(value).toBeLessThanOrEqual(number)                   - Checks if value is less than or equal to number.
        expect(value).toBeNull()                                    - Checks if value is null
        expect(value).toContain(substring)                          - Checks if value contains substring
        expect(value).toEqual(expected)                             - Checks if two values have the same structure and content, but not necessarily the same reference




    - Assertion Methods - with Elements
        Methods Name                                            Description
        ------------------------------                          -------------------------------------------
        expect(element).toBeVisible()                           - Verifies that the element is visible.
        expect(element).toBeHidden()                            - Verifies that the element is hidden.
        expect(element).toBeEnabled()                           - Verifies that the element is enabled.
        expect(element).toBeDisabled()                          - Verifies that the element is disabled.
        expect(element).toBeEmpty()                             - Verifies that the element is empty.
        expect(element).toBeChecked()                           - Verifies that the element is checked. (checkbox, radio button)
        expect(element).toContainText(text)                     - Verifies that the element contains the specified text.
        expect(element).toHaveText(text)                        - Verifies that the element's text is equal to the specified text.
        expect(element).toHaveAttribute(name, value)            - Verifies that the element has the specified attribute with the specified value.
        expect(element).toHaveCSS(name, value)                  - Verifies that the element has the specified CSS property with the specified value

            
----------------------------------------------------------------------------------------------------------------------------------------------------
New Topic 

    Handling Array of elements

        - In Selenium, we were using the findElements() method wich was returning the List of WebELements 
        - We have the similar approach in Playwright with method called: allMethods() which will return the Array Elements 
            - For Ex: 
                - in our practice web apge: https://loopcamp.vercel.app/, we ahve table of the links
                - Should I locate one by one, or locate all of that into one data structure. 
                - When you inspect those, it will show the "ul" - unordered list and "li" - list tags
                - Copy the 'ul' element, but if you give it to perplexity, it will find the unique for 'ul'
                - We can ask perplexity to make it for the "li" under "ul" html tags. 
                - Then take it and check if it finding on the DOM what you are looking for. 

        - Not instead of locater we ill sue another method because locator will return one and if there multiple match, it will give the first match
            - page.locator("ul.list-group.list-group-flush li"); // this will retiurn ONLY 1 and the 1st matching one 

        - But will use if it with .all() method trying to get the all mathces 
            - await page.locator("//ul[@class='list-group list-group-flush']/li").all();



----------------------------------------------------------------------------------------------------------------------------------------------------
New Topic 

    iframes

        - HTML elements that embed another HTML document within the current document.
        - Allows to display content from a different source or domain.
        - The iframes isolate the content from the main page, they have their own context.
        - The iframes isolate the content from the main page, they have their own context.

        - It is mostly beneficial to use the 3rd party apps becaus eof various reaosns. 
            Ex: 
                Let say you are building eCommerce app, need a payment function. 
                Creating payment process function from scratch will required a lot of security, license and regulations and etc. For example: Stripe
                Instead, complanies use the already existing 3rd aprty apps with the help of iFrames and integrate it into the app. 

        - In Selenium, we had to switch back and forth like going into and going back to defautl or the one direct parent. 
        - But Playwright, it is auto switching. Even for Alerts as well. 




        Handlings iframes in Playwright

            - The frameLocator() method of the page object is used for locating the iframes.
            - The iframes can be located by using the following locators:
                    - ID
                    - Name
                    - CSS
                    - XPath


                Ex
                    // Locate iFrame by ID
                    const iframel = page.frameLocator ('#frameID');

                    // Locate iFrame by name
                    const iframe2 = page.frameLocator ('iframe [name="myFrame"] ');

                    // Locate iFrame using CSS selector
                    const frame = page.frameLocator('iframe, classname');

                    // Locate iFrame using XPath
                    const iframe4 = page.frameLocator('//iframe [@class="value"] ');

    Note: https://loopcamp.vercel.app/frames.html
        - After break, we will sue this practice url for Iframe tasks 
----------------------------------------------------------------------------------------------------------------------------------------------------
BREAK
----------------------------------------------------------------------------------------------------------------------------------------------------
New Topic 

    Practice of the iFrame Task 

        - General note that, when you locate the element with teh attribute that has the value ending with numbers, avoid using it
        - Most likely is a dynamic element chaning the value. 


        - In oder to automate the iFrames, we need to locate it first. 
        - Since the element is from a different source, we will use different method to locate not hte locator();
            - let textIFrame = page.frameLocator("//iframe[@class='tox-edit-area__iframe']");

        - Now, I need to locate the element from this iFrame
            - let contentArea = textIFrame.locator("//body[@class='mce-content-body ']")

        - Then lets imagine that input field is the card number and we do not want to revealt it. 
            - We can again put it in the env variable 

        - Now, lets say I want to locate an element which is not inside of the iframe, then I just od it with directly locator()
            - let headerTextElem = page.locator("//h3[text()='An iFrame containing the TinyMCE WYSIWYG Editor']"); 
            - await expect(headerTextElem).toHaveText('An iFrame containing the TinyMCE WYSIWYG Editor');


        NOTE: if you ahve nexted iFrames, you can lcoate it to be unique one that you want to navigate and go from there. ???



----------------------------------------------------------------------------------------------------------------------------------------------------
New Topic 
    
    Report

        - We can run from package.json, for the report command to see the report 
        - It will open the report on the browser for the last executed test 
        - This is the default report of the Playwright 
        - But diring the project implementation from the upcoming class, we will use the Cucumber Report 
        - There are some others like ALLURE etc. which requires additional configurations 
            - in playwright.config.js for the "reporter" instead of "html", we pass "ALLURE" + need to install ALLURE package
            - It is doable but not needed for us right now. 






















